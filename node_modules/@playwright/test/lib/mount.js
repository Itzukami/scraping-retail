"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mount = mount;

var _utils = require("playwright-core/lib/utils");

/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function mount(page, jsxOrType, options, baseURL, viewport) {
  await page.goto('about:blank');
  await page._resetForReuse();
  await page.context()._resetForReuse();
  await page.setViewportSize(viewport);
  await page.goto(baseURL);
  let component;
  if (typeof jsxOrType === 'string') component = {
    kind: 'object',
    type: jsxOrType,
    options
  };else component = jsxOrType;
  const callbacks = [];
  wrapFunctions(component, page, callbacks);
  const dispatchMethod = `__pw_dispatch_${(0, _utils.createGuid)()}`;
  await page.exposeFunction(dispatchMethod, (ordinal, args) => {
    callbacks[ordinal](...args);
  }); // WebKit does not wait for deferred scripts.

  await page.waitForFunction(() => !!window.playwrightMount);
  const selector = await page.evaluate(async ({
    component,
    dispatchMethod
  }) => {
    const unwrapFunctions = object => {
      for (const [key, value] of Object.entries(object)) {
        if (typeof value === 'string' && value.startsWith('__pw_func_')) {
          const ordinal = +value.substring('__pw_func_'.length);

          object[key] = (...args) => {
            window[dispatchMethod](ordinal, args);
          };
        } else if (typeof value === 'object' && value) {
          unwrapFunctions(value);
        }
      }
    };

    unwrapFunctions(component);
    return await window.playwrightMount(component);
  }, {
    component,
    dispatchMethod
  });
  return selector;
}

function wrapFunctions(object, page, callbacks) {
  for (const [key, value] of Object.entries(object)) {
    const type = typeof value;

    if (type === 'function') {
      const functionName = '__pw_func_' + callbacks.length;
      callbacks.push(value);
      object[key] = functionName;
    } else if (type === 'object' && value) {
      wrapFunctions(value, page, callbacks);
    }
  }
}